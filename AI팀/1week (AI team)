

#///// 합체본(초안)




import cv2

class VideoCamera(object):
    def __init__(self):
        # Using OpenCV to capture from device 0. If you have trouble capturing
        # from a webcam, comment the line below out and use a video file
        # instead.
        self.video = cv2.VideoCapture(1)
        # If you decide to use video.mp4, you must have this file in the folder
        # as the main.py.
        # self.video = cv2.VideoCapture('video.mp4')

    def __del__(self):
        self.video.release()

    def get_frame(self):
        # Grab a single frame of video
        ret, frame = self.video.read()
        return frame


if __name__ == '__main__':
    cam = VideoCamera()
    while True:
        frame = cam.get_frame()

        # show the frame
        cv2.imshow("Frame", frame)
        key = cv2.waitKey(1) & 0xFF

        # if the `q` key was pressed, break from the loop
        if key == ord("q"):
            break

    # do a bit of cleanup
    cv2.destroyAllWindows()
    print('finish')


# 이미지에서 나사 검출하는 함수
def detect_nuts(image):
    # 이미지를 회색조로 변환
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    
    # 이미지의 노이즈 제거
    blur = cv2.GaussianBlur(gray, (5, 5), 0)
    
    # 이미지 이진화
    thresh = cv2.threshold(blur, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)[1]
    
    # 이미지에서 윤곽선 검출
    contours, hierarchy = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    
    # 윤곽선에서 나사 검출
    nuts = []
    for contour in contours:
        (x, y, w, h) = cv2.boundingRect(contour)
        aspect_ratio = w / float(h)
        if aspect_ratio >= 0.8 and aspect_ratio <= 1.2:
            nut = image[y:y+h, x:x+w]
            nuts.append(nut)
    
    return nuts

# 이미지에서 나사 개수, 길이, 수량 추출하는 함수
def extract_nuts_info(image):
    # 이미지에서 나사 검출
    nuts = detect_nuts(image)
    
    # 각 나사에서 길이와 수량 추출
    nut_lengths = []
    nut_quantities = []
    for nut in nuts:
        # 이미지에서 문자 추출
        nut_text = pytesseract.image_to_string(nut, config='--psm 6')
        
        # 나사 길이와 수량 추출
        nut_len_match = re.search(r'\d+mm', nut_text)
        if nut_len_match:
            nut_len = int(nut_len_match.group().replace('mm', ''))
            nut_lengths.append(nut_len)
        nut_qty_match = re.search(r'Qty \d+', nut_text)
        if nut_qty_match:
            nut_qty = int(nut_qty_match.group().replace('Qty ', ''))
            nut_quantities.append(nut_qty)
    
    # 나사 개수 추출
    num_nuts = len(nuts)
    




